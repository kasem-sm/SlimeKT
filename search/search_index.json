{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction \ud83d\ude4b\u200d\u2642\ufe0f","text":"<p>Article sharing platform where you can personalize, subscribe to your favourite topics, get daily-read reminders, explore new authors and share your articles. It uses the most cutting edge technology in the frontend and backend part such as Ktor, MongoDB and Jetpack Compose.</p>"},{"location":"#app-architecture-diagram","title":"App Architecture Diagram","text":"<p>It follows the recommended app architecture as stated in official Android documentation. Please refer to this page for more information on this topic.</p> <p></p>"},{"location":"#module-graph","title":"Module Graph","text":""},{"location":"#repository-overview","title":"Repository overview \ud83d\udcc2","text":"<p>SlimeKT has its own backend built with Ktor. The folder <code>/api</code> consists of our backend deployed on Heroku. SlimeKT Android application resides inside of the <code>/app</code> folder.</p>"},{"location":"#screenshots","title":"Screenshots \ud83d\udcf1","text":"Home screen Explore Screen Detail Screen Register sheet Subscribe Topics Screen Login sheet Profile Screen (WIP) Home screen with search query"},{"location":"#medium-articles","title":"Medium Articles \ud83d\udd8b","text":"<ol> <li>SlimeKT - Kotlin Powered open source project. (Android app with Ktor backend)</li> <li>Android\u2019s IME Actions: Don\u2019t ignore them. Read here</li> <li>Create Animated PlaceHolder for your Jetpack Compose text fields Read here</li> <li>When Jetpack's Glance met his fellow worker, WorkManager (Coming soon)</li> </ol> <p>More articles by kasem-sm on Medium.</p>"},{"location":"#contact","title":"Contact \ud83e\udd19","text":"<p>Direct Messages on My Twitter are always open. If you have any questions related to SlimeKT or Android development, ping me anytime!</p>"},{"location":"#credits","title":"Credits \ud83d\udc8e","text":"<ul> <li>Tivi by chrisbanes - A divine project for me to explore. I refer to this project as Gold \ud83e\udd47.</li> <li>Gabor Varadi - He is always willing to answer my questions. A great man and a blessing to the Android community (AKA, the <code>SavedStateHandle</code> preacher).</li> <li>Doris Liu and Manuel Vivo - They always help review my code snippets and add their value to them.</li> <li>Hadi - Assisted me in improving the modularized structure of this project.</li> <li>Marcel - His suggestions helped me to improve the Glance widget.</li> </ul>"},{"location":"end_notes/","title":"End Notes","text":""},{"location":"end_notes/#contact","title":"Contact \ud83e\udd19","text":"<p>Direct Messages on My Twitter are always open. If you have any questions related to SlimeKT or Android development, ping me anytime!</p>"},{"location":"end_notes/#contribution-guidelines","title":"Contribution Guidelines:","text":"<p>There are no special rules for contributing your expertise and making the open-source community more powerful. Just don't forget to file an issue or start a discussion so that I may not be surprised when you create a pull request. Running <code>spotlessApply</code> before creating a pull request would be the cherry on the cake.</p>"},{"location":"end_notes/#credits","title":"Credits \ud83d\udc8e","text":"<ul> <li>Tivi by chrisbanes - A divine project for me to explore. I refer to this project as Gold \ud83e\udd47.</li> <li>Gabor Varadi - He is always willing to answer my questions. A great man and a blessing to the Android community (AKA, the <code>SavedStateHandle</code> preacher).</li> <li>Doris Liu and Manuel Vivo - They always help review my code snippets and add their value to them.</li> <li>Hadi - Assisted me in improving the modularized structure of this project.</li> <li>Marcel - His suggestions helped me to improve the Glance widget.</li> </ul>"},{"location":"end_notes/#license","title":"License","text":"<pre><code>Copyright 2022 Kasem SM\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"android/features/ft_article/","title":"Article","text":""},{"location":"android/features/ft_article/#overview","title":"Overview","text":"<ul> <li>Users can search for articles and filter them according to their favorite author or any topic they like.</li> <li>Custom Implementation:<ul> <li>Article Detail Screen Supports Text Markdown such as displaying quotes, code blocks, and many more.</li> </ul> </li> <li>Daily Read Reminder notification and widget:<ul> <li>Users get a notification to read an article every 24 hours.</li> <li>If the user is authenticated and has subscribed to any topics of their choice, the server will pick a random article from their subscription.</li> <li>If the user is unauthenticated, the server will pick any random article.</li> <li>Article once shown for Daily Read would not be shown again (verified on the client-side).</li> <li>The app's widget also displays the article selected for the Daily Read.</li> <li>Clicking the Daily Read notification would open the respective article.</li> </ul> </li> </ul>"},{"location":"android/features/ft_article/#demo","title":"Demo","text":"Something went wrong      Article List and Detail View Demo"},{"location":"android/features/ft_article/#screenshots","title":"Screenshots","text":"Detail Screen Detail Screen (Dark) Article List Screen Article List Screen (Dark)"},{"location":"android/features/ft_authentication/","title":"Authentication","text":""},{"location":"android/features/ft_authentication/#overview","title":"Overview","text":"<ul> <li>Implemented proper navigation flow as guided by the official Android documentation.</li> <li>As soon as the authentication state changes:<ul> <li>User subscribed topics get cleared from the cache.</li> <li>Every visible screen gets refreshed with updated data.</li> </ul> </li> <li>User's confidential data, such as passwords and unique tokens, is encrypted on the server as well as on the client-side.</li> <li>Proper username and password validation, again on the server as well as on the client-side.</li> <li>Users can opt-in to whether they want to be displayed to other users in the explore section while registering themselves.</li> <li>Authentication is only required to personalize the app's content.</li> </ul>"},{"location":"android/features/ft_authentication/#demo","title":"Demo","text":"Something went wrong      Authentication Demo"},{"location":"android/features/ft_topics/","title":"Topics","text":""},{"location":"android/features/ft_topics/#overview","title":"Overview","text":"<ul> <li>Users can categorize and filter lists of articles using topics.</li> <li>Users can subscribe to their favorite topics to personalize their home screen content.</li> </ul>"},{"location":"android/features/ft_topics/#demo","title":"Demo","text":"Something went wrong      Subscribing Topics Demo"},{"location":"android/features/misc/","title":"Miscellaneous","text":""},{"location":"android/features/misc/#tech-stack","title":"Tech Stack","text":"<ul> <li>Kotlin: Official Programming Language for Android.</li> <li>Jetpack Compose: Jetpack Compose is Android\u2019s modern toolkit for building native UI.</li> <li>Kotlin Coroutines: A concurrency design pattern. On Android, coroutines help to manage long-running tasks that might otherwise block the main thread and cause your app to become unresponsive.</li> <li>Kotlin Flows: In coroutines, a flow is a type that can emit multiple values sequentially.</li> <li>Room Database: The Room persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite.</li> <li>Ktor Client: Ktor includes a multiplatform asynchronous HTTP client, which allows you to make requests and handle responses in the Kotlin way.</li> <li>Coil: An image loading library for Android backed by Kotlin Coroutines.</li> <li>Dagger Hilt: A dependency injection library for Android that reduces the boilerplate of doing manual dependency injection.</li> <li>Accompanist: A collection of extension libraries for Jetpack Compose.</li> <li>Work Manager: The recommended solution for persistent work such as immediate or long-running tasks</li> <li>Glance: Build widget layouts for remote surfaces using a Jetpack Compose-style API.</li> </ul>"},{"location":"android/features/misc/#other-features","title":"Other Features","text":"<ul> <li>Observer Pattern: Data from the cache would be shown while new data is fetched from the server. The data on the screen gets updated immediately once new data is cached (Hot Flow).</li> <li>Parallel API Requests: While subscribing to multiple topics at once, the app sends a parallel API request to the server for faster execution of the task. (The requests are independent of one another.)</li> <li>Prioritize Recent Request: Any ongoing requests get canceled once a new request is made (for example, if a user filters the article list with the topic \"a\" and then immediately wishes to filter the list with topic \"b\").</li> <li>IME Action: SlimeKT uses the keyboard's IME Action wherever possible for the best user experience.</li> <li>WorkManager Use case: App uses WorkManager API to update user's subscriptions and to fetch Daily Read articles.</li> <li>AndroidX Glance Use case: Daily Read Widget with the power of Jetpack Compose.</li> <li>Composition Local: To provide different font styles to Composable.</li> <li>UI Sate: SlimeKT combines various flows to construct a UI state.</li> <li>Lightweight modules: Every module is as small as possible and is only responsible for the given task.</li> <li>Dark Mode and Material You: SlimeKT supports dark mode as well as Material You. The color of the app changes according to the user's wallpaper.</li> </ul>"},{"location":"api/article/get_all_articles/","title":"Get All Articles","text":"<pre><code>  GET api/article/all\n</code></pre> <p>Fetches all the articles in paged form.</p> Parameter Type Description Required Default Value <code>topic</code> <code>string</code> Filter article by the given topic \ud83d\udc4e Empty <code>query</code> <code>string</code> Filter article by the given query \ud83d\udc4e Empty <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": {\n        \"articles\": [\n            {\n                \"title\": \"I use an outdated iPhone 12\",\n                \"description\": \"Does it really matters? *I guess __no__*\",\n                \"featuredImage\": \"https://images.pexels.com/photos/10768569/pexels-photo-10768569.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940\",\n                \"author\": \"Kasem S.M\",\n                \"topic\": \"iOS\",\n                \"timestamp\": 1644302818957,\n                \"id\": 1644302818\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"api/article/get_article_by_id/","title":"Get Article By Id","text":"<pre><code>  GET api/article/get\n</code></pre> <p>Fetches the article with the given ID.</p> Parameter Type Description Required <code>id</code> <code>string</code> The unique ID of the article \ud83d\udc4d <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": {\n        \"title\": \"Not so fancy way of writing websites\",\n        \"description\": \"Here maybe a long description. This may support an inline code like `code`\",\n        \"featuredImage\": \"https://miro.medium.com/max/1152/1*D0wmwNaatVN9_hxYn7eflA.png\",\n        \"author\": \"Unknown\",\n        \"topic\": \"Web\",\n        \"timestamp\": 1640668386898,\n        \"id\": 1640386898\n    }\n}\n</code></pre>"},{"location":"api/article/get_articles_in_explore/","title":"Get Articles In Explore","text":"<pre><code>  GET api/article/explore\n</code></pre> <p>Fetches four articles from any topic that has not yet been subscribed to by the user. </p> <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": [\n        {\n            \"title\": \"I use an outdated iPhone 12\",\n            \"description\": \"Does it really matters? *I guess __no__*\",\n            \"featuredImage\": \"https://images.pexels.com/photos/10768569/pexels-photo-10768569.jpeg?auto=compress&amp;\",        \n            \"author\": \"Kasem S.M\", \n            \"topic\": \"iOS\",\n            \"timestamp\": 1644302818957,\n            \"id\": 1644302818\n        },\n    ]\n}\n</code></pre>"},{"location":"api/article/get_daily_read_article/","title":"Get Daily Read Article","text":"<p><pre><code>  GET api/article/get/random\n</code></pre> Fetches a random article from the user's subscription to be shown as the Daily Read. If the user is not authenticated or has not yet subscribed to topics, a random article would be fetched. It is the responsibility of the client to make sure that repeated articles are not  shown in the Daily Read.</p> <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": {\n        \"title\": \"Kotlin Flows vs RX. Too debatable topic, let's dicuss them.\",\n        \"description\": \"Flow is the Kotlin type that can be used to model streams of data. \\nJust like LiveData and RxJava streams, Flow lets you implement the observer pattern: a software design pattern that consists of an object (a.k.a. observable, producer, source, emitter) that maintains a list of its dependents, called observers (subscribers, collectors, receivers, etc.), and notifies them automatically of any state changes. This terminology is used interchangeably throughout this article depending on the context, but those terms always refer to the same two entities.\",\n        \"featuredImage\": \"https://miro.medium.com/max/1400/1*Ab9qskEuQtdigd7SYcx5CA.jpeg\",\n        \"author\": \"Unknown\",\n        \"topic\": \"Android\",\n        \"timestamp\": 1640667227843,\n        \"id\": 1606672784\n    }\n}\n</code></pre>"},{"location":"api/article/post_article/","title":"Post New Article","text":"<pre><code>  POST api/article/create \ud83d\udd10\n</code></pre> Header Key Header Value <code>Authorization</code> Bearer Token ` <p>It creates a new article provided that the user is authenticated. If the user passes a topic name that doesn't exist, the server will automatically create a new topic with that name. Currently the <code>POST</code> article route is disabled in production to avoid abuse.</p> <p>Create Request: <pre><code>{\n    \"title\": \"the title of your article\",\n    \"description\": \"long __description__ that supports *markdown*\",\n    \"featuredImage\": \"thumbnail_img_url.jpg\",\n    \"author\": \"writer's name\",\n    \"topic\": \"topic/category name\"\n}\n</code></pre></p>"},{"location":"api/auth/get_authentication_status/","title":"Get Authentication Status","text":"<pre><code>  GET /api/auth/authenticate \ud83d\udd10\n</code></pre> Parameter Type Description Required <code>userId</code> <code>string</code> The Current User ID \ud83d\udc4e <p>It verifies if the user still exists in our database.</p> <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": true/false\n}\n</code></pre>"},{"location":"api/auth/get_random_user/","title":"Get Random Author","text":"<pre><code>  GET api/auth/randomAuthor \ud83d\udd10\n</code></pre> Header Key Header Value <code>Authorization</code> Bearer Token ` <p>Fetches a random author to be displayed in the Explore section.</p> <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": {\n        \"username\": \"jerry_the_author\",\n        \"id\": \"484831\"\n    }\n}\n</code></pre>"},{"location":"api/auth/post_login_register/","title":"Login/Register Route","text":""},{"location":"api/auth/post_login_register/#register-a-new-user","title":"Register a new user","text":"<pre><code>  POST api/auth/register\n</code></pre> Parameter Type Description Required <code>username</code> <code>string</code> Your username \ud83d\udc4d <code>password</code> <code>string</code> Your password \ud83d\udc4d <code>discoverable</code> <code>0 or 1</code> Account discoverable to other users \ud83d\udc4d"},{"location":"api/auth/post_login_register/#login-an-existing-user","title":"Login an existing user","text":"<pre><code>  POST api/auth/login\n</code></pre> Parameter Type Description Required <code>username</code> <code>string</code> Registered username \ud83d\udc4d <code>password</code> <code>string</code> Registered password \ud83d\udc4d <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": {\n        \"userId\": \"123456\",\n        \"username\": \"jhon\",\n        \"token\": \"09876543210987654321\"\n    }\n}\n</code></pre>"},{"location":"api/subscribption/get_all_explore_topics/","title":"Get All Explore Topics","text":"<pre><code>  GET api/subscriptionService/explore\n</code></pre> <p>Fetches all the unsubscribed topics of the current user. If <code>userId</code> is null, the request will redirect to the Get All Topics route.</p> Parameter Type Description Required Default Value <code>userId</code> <code>string</code> The Current User ID \ud83d\udc4e <code>null</code> <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": [\n        {\n            \"name\": \"Politics\",\n            \"totalSubscribers\": 1,\n            \"hasUserSubscribed\": false,\n            \"timestamp\": 1642217005570,\n            \"id\": \"61e23e2ddd9010680bc12ebd\"\n        },\n        {\n            \"name\": \"Animation\",\n            \"totalSubscribers\": 1,\n            \"hasUserSubscribed\": false,\n            \"timestamp\": 1642300794226,\n            \"id\": \"61e3857af680350cc7e66bc4\"\n        },\n        {\n            \"name\": \"Science\",\n            \"totalSubscribers\": 1,\n            \"hasUserSubscribed\": false,\n            \"timestamp\": 1642217010923,\n            \"id\": \"61e23e32dd9010680bc12ebf\"\n        },\n    ]\n}\n</code></pre>"},{"location":"api/subscribption/get_all_subscribed_topics/","title":"Get All Subscribed Topics","text":"<pre><code>  GET api/subscriptionService/all\n</code></pre> <p>Fetches all the \"subscribed** topics of the current user. If <code>userId</code> is null, an empty list would be retrieved.</p> Parameter Type Description Required Default Value <code>userId</code> <code>string</code> The Current User ID \ud83d\udc4e <code>null</code> <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": [\n        {\n            \"name\": \"iOS\",\n            \"totalSubscribers\": 1,\n            \"hasUserSubscribed\": true,\n            \"timestamp\": 1642217005570,\n            \"id\": \"61e23e2ddd9010680bc12ebd\"\n        },\n        {\n            \"name\": \"Technology\",\n            \"totalSubscribers\": 1,\n            \"hasUserSubscribed\": true,\n            \"timestamp\": 1642300794226,\n            \"id\": \"61e3857af680350cc7e66bc4\"\n        },\n        {\n            \"name\": \"Web\",\n            \"totalSubscribers\": 1,\n            \"hasUserSubscribed\": true,\n            \"timestamp\": 1642217010923,\n            \"id\": \"61e23e32dd9010680bc12ebf\"\n        },\n    ]\n}\n</code></pre>"},{"location":"api/subscribption/subscribe_if_not/","title":"Subscribe To Topic","text":"<pre><code>  POST api/subscriptionService/subscribeIfNot \ud83d\udd10\n</code></pre> Header Key Header Value <code>Authorization</code> Bearer Token ` Parameter Type Description Required <code>topicId</code> <code>string</code> The unique ID of the topic to subscribe \ud83d\udc4d <p>Subscribe to the topic if the user has not. If the user has already subscribed, the API will unsubscribe them from the topic.</p> <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": \"Subscribed\",\n    \"data\": \"61e23909ece7d77eacfd9c2d\" // The topicID\n}\n</code></pre>"},{"location":"api/topics/get_all_topics/","title":"Get All Topics","text":"<pre><code>  GET api/topic/all\n</code></pre> <p>Fetches all the article's topics available in the database.</p> <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": [\n        {\n            \"name\": \"iOS\",\n            \"totalSubscribers\": 1,\n            \"timestamp\": 1642217005570,\n            \"id\": \"61e23e2ddd9010680bc12ebd\"\n        },\n        {\n            \"name\": \"Android\",\n            \"totalSubscribers\": 1,\n            \"timestamp\": 1642215689612,\n            \"id\": \"61e23909ece7d77eacfd9c2d\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api/topics/get_topic_by_id/","title":"Get Topic By Id","text":"<pre><code>  GET api/topic/get\n</code></pre> <p>Fetches the article topic with the <code>id</code> given in the parameters. If the <code>userId</code> exists in the parameters, the server will scan and include <code>hasUserSubscribed</code> <code>boolean</code> that indicates whether the current user has subscribed to that topic or not.</p> Parameter Type Description Required <code>id</code> <code>string</code> The unique ID of the article \ud83d\udc4d <code>userId</code> <code>string</code> Current user ID \ud83d\udc4e <pre><code>{\n    \"success\": true,\n    \"additionalMessage\": null,\n    \"data\": {\n        \"name\": \"iOS\",\n        \"totalSubscribers\": 1,\n        \"timestamp\": 1642217005570,\n        \"id\": \"61e23e2ddd9010680bc12ebd\",\n        \"hasUserSubscribed\": false\n    }\n}\n</code></pre>"},{"location":"guide/app_architecture/","title":"App Architecture","text":"<p>SlimeKT follows the MVVM Architecture. Every screen in our app follows the below mentioned model. </p>"},{"location":"guide/app_architecture/#ui-layer","title":"UI Layer","text":""},{"location":"guide/app_architecture/#screen","title":"Screen","text":"<p>Every screen in the app is tied to a <code>viewModel</code>. The screen composable collects data from the <code>viewModel</code> and provides it to our screen content which is a stateless composable. UI-related events such as navigation and displaying messages to the user are performed by this composable.</p>"},{"location":"guide/app_architecture/#screen-content-a-stateless-composable","title":"Screen Content - A Stateless Composable","text":"<p>As the name states, this part contains the actual content of our screen, such as Button, LazyList, Text Composable, etc. This Composable is stateless. The main aim of creating a separate composable that is stateless is to allow easier testing.</p>"},{"location":"guide/app_architecture/#viewmodel","title":"ViewModel","text":"<p>The <code>viewModel</code> exposes <code>uiEvent</code> and <code>uiState</code> and some public functions. <code>uiEvent</code> is a SharedFlow that is used to fire off one-time events such as triggering navigation or showing a message to the user. <code>uiState</code> is constructed by combining various Flows to update the state of the screen. The <code>viewModel</code> takes domain layer classes such as Interactors and Observers as a dependencies for it. </p>"},{"location":"guide/app_architecture/#domain-layer","title":"Domain Layer","text":""},{"location":"guide/app_architecture/#interactors","title":"Interactors","text":""},{"location":"guide/app_architecture/#-work-in-progress-","title":"-- Work In Progress --","text":""},{"location":"guide/interactors/","title":"Interactors","text":"<p>Every interactor (use-case) in the project leads to code duplications so we have created Top Level functions which help us to avoid it. </p>"},{"location":"guide/interactors/#default-interactor","title":"Default Interactor","text":"<p>This function is used in every interactor (not really a use-case). It returns a <code>flow</code> of type <code>Stage</code> which is a sealed class containing <code>Success</code> and <code>Exception</code> objects. <code>doWork</code> is where we perform fetching and caching of the data.</p> <pre><code>inline fun &lt;T&gt; CoroutineDispatcher.start(\ncrossinline doWork: suspend () -&gt; T,\n): Flow&lt;Stage&gt; {\nreturn flow {\ntry {\nwithTimeout(TimeUnit.MINUTES.toMillis(5)) {\ndoWork.invoke()\nemit(Stage.Success)\n}\n} catch (e: TimeoutCancellationException) {\nemit(Stage.Exception(e))\n}\n}.catch { throwable -&gt;\nemit(Stage.Exception(throwable))\n}.flowOn(this)\n}\n</code></pre> <p>The usage may look like: <pre><code>fun execute(articleId: Int): Flow&lt;Stage&gt; {\nreturn dispatchers.default.start {\nval articleFromApi = api.getArticleById(articleId)\n.getOrThrow()\n\narticleFromApi?.data?.let {\napplicationScope.launch {\nval pair = cache.getRespectivePair(it.id)\ncache.insert(it.toEntity(pair))\n}.join()\n}\n}\n}\n</code></pre></p> <p>It also has a <code>.collect()</code> extension function which is used by our ViewModel to avoid code duplication.</p> <pre><code>/**\n * [collect] is an extension function which takes in\n * a loader which helps in showing the progressBar for each execution\n * and onError lambda gets triggered if any exception is thrown.\n */\nsuspend fun Flow&lt;Stage&gt;.collect(\nloader: ObservableLoader,\nonError: suspend (String) -&gt; Unit,\nonSuccess: suspend () -&gt; Unit = { },\n) {\nloader.start()\ncollectLatest { stage -&gt;\nwhen (stage) {\nis Stage.Success -&gt; onSuccess.invoke()\nis Stage.Exception -&gt; onError.invoke(stage.throwable.toMessage)\n}\nloader.stop()\n}\n}\n</code></pre>"},{"location":"guide/observable_loader/","title":"Observable Loader","text":"<p>Inspired by ChrisBane's tivi project, Observable Loader exposes a <code>flow</code> of type <code>boolean</code> which returns <code>true</code> when the count is greater than 0. It consists of a <code>start</code> function which increments the counter and <code>stop</code> function which decrements the counter. </p>"},{"location":"guide/view_state_construction/","title":"View-State","text":"<p>Every ViewModel exposes a <code>viewState</code> to the screen which is made by combining various flows.</p> <pre><code>    val state: StateFlow&lt;ExploreState&gt; = combine(\nloadingStatus.flow,\nobserveLatestArticles.flow,\nobserveInExploreTopics.flow\n) { latestArticleLoading, latestArticles, topics -&gt;\nExploreState(\nisLoading = latestArticleLoading,\narticles = latestArticles,\ntopics = topics\n)\n}.stateIn(viewModelScope, ExploreState.EMPTY)\n</code></pre>"},{"location":"modules/why_modularization/","title":"Why Modularization","text":"<p>So I have been exploring modularization for the past three months, and I know most of you would ask me why I have modularized a small app?. There are hundreds of articles on the internet by fellow developers about the need and benefits of modularization, so I would prefer not to write much about it here.\u00a0</p> <p>The first answer to it is to gain experience. Other advantages, such as build speed, code reusability, separation of features, Kotlin multi-platform ability, Think of a real-life situation where 10 developers are working on the same project. It would be so much easier if we delegated these developers to work on only a specific module/feature and advised them not to touch any other modules. This has its advantages, such as the decreased possibility of breaking other features while working on any one of them. There would be less merge conflict, etc.</p>"},{"location":"modules/android/ui_modules/","title":"Android Modules","text":""},{"location":"modules/android/ui_modules/#common-ui-module","title":"Common UI Module","text":"<p>It contains Jetpack Compose UI components, which are stateless and reusable. Compose Modifier utilities and theme files such as colors and fonts also reside in this module.</p>"},{"location":"modules/android/ui_modules/#ui-core-module","title":"UI Core Module","text":"<p>Contains utilities and classes such as UiEvent, FlowUtils, etc. that are required by every UI Module.</p>"},{"location":"modules/android/ui_modules/#database-module","title":"Database Module","text":"<p>Handles creation and persistence of databases.</p>"},{"location":"modules/android/ui_modules/#task-impl","title":"Task-impl","text":"<p>Consists of concrete implementation of 'tas-api' module.</p>"},{"location":"modules/android/ui_modules/#auth-impl","title":"Auth-impl","text":"<p>Consists of concrete implementation of 'auth-api' module.</p>"},{"location":"modules/android/ui_modules/#ui-modules","title":"UI Modules","text":"<p>Every screen is a module that contains a screen UI made with Jetpack Compose, the screen's state, and its ViewModel. They are dependent on feature interactors. The ViewModel exposes a (single) view state to the screen.</p>"},{"location":"modules/feature/feature_module_structure/","title":"Feature Modules","text":""},{"location":"modules/feature/feature_module_structure/#structure","title":"Structure","text":"<p>Every feature module consists of the following sub-modules:</p> <ul> <li> <p>datasource-api: It contains interfaces for cache and network that can be injected into the <code>interactors</code> module. This can also make testing easier. The naming convention of the classes in this module are <code>XFeatureApiService</code>, <code>XFeatureDatabaseService</code></p> </li> <li> <p>datasource-impl: It contains a concrete implementation of the interface from the data source module. The naming convention of the classes are <code>XFeatureApiServiceImpl</code>, <code>XFeatureDatabaseServiceImpl</code></p> </li> <li> <p>domain/model: It contains the UI Model class of the feature, which can be provided to <code>feature-common-ui</code> modules or the module where the screen using the feature resides.</p> </li> <li> <p>domain/interactors: It contains use-cases or business logic for the feature. It takes a feature data source as a dependency. Fetching and caching-related tasks are done here. </p> </li> </ul>"},{"location":"modules/feature/feature_module_structure/#feature-authentication","title":"Feature Authentication","text":"<p>The authentication feature module consists of one extra module, including all the other modules that a feature module usually contains. They are:</p> <ul> <li>worker: This module verifies the user's authentication status periodically and checks if the user still exists in our database or if their token has expired.</li> </ul>"},{"location":"modules/feature/feature_module_structure/#feature-article","title":"Feature Article","text":"<p>The Article feature module consists of four extra modules, including all the other modules that a feature module usually contains. They are:</p> <ul> <li>markdown: It contains all the necessary classes that help in rendering text markdown in the Article Detail Screen. It depends on a third-party library called <code>common mark</code>.</li> <li>widget: It contains all the necessary classes that help in creating a Daily Read widget using the Jetpack Glance API.</li> <li>worker: This module manages the Daily Read feature. It consists of <code>DailyReadManager</code> which fetches articles and shows them as \"Daily Read\" via notification and widget.</li> <li>common-article-ui: It contains common UI components related to article feature such as ArticleCard, which are used on every screen where an article is displayed.</li> </ul>"},{"location":"modules/feature/feature_module_structure/#feature-topic","title":"Feature Topic","text":"<p>A topic feature module consists of one extra module, including all the other modules that a feature module usually contains. They are:</p> <ul> <li>worker: This module manages the subscription of topics.</li> </ul>"},{"location":"modules/java_kotlin/java_kotlin_modules/","title":"Java/Kotlin Modules","text":""},{"location":"modules/java_kotlin/java_kotlin_modules/#core-module","title":"Core Module","text":"<p>It consists of core business models, classes, and utilities for all other modules in the project. It doesn't depend on any other modules.</p>"},{"location":"modules/java_kotlin/java_kotlin_modules/#common-test-utils","title":"Common Test Utils","text":"<p>It consists of utilities and helper extension functions used during unit testing.</p>"},{"location":"modules/java_kotlin/java_kotlin_modules/#task-api","title":"Task-api","text":"<p>It consists of interface that is responsible to execute different workers. This is done to avoid providing worker modules directly to any other modules. This module also help us during testing, i.e, we can swap out the worker with a fake Implementation of this interface.</p>"},{"location":"modules/java_kotlin/java_kotlin_modules/#auth-api","title":"Auth-api","text":"<p>It consists of interface that is responsible to manage the current authentication session. This can also make testing easier.</p>"},{"location":"tests/status/","title":"Testing Status","text":""},{"location":"tests/status/#unit-tests","title":"Unit Tests","text":"<p>Currently, unit tests are only written for:</p>"},{"location":"tests/status/#use-cases-and-observer","title":"Use-cases and Observer","text":"<ul> <li> <p>GetArticleById</p> </li> <li> <p>GetLatestArticle</p> </li> <li> <p>ObserveArticleById</p> </li> <li> <p>ObserveDailyReadArticle</p> </li> <li> <p>ObserveLatestArticles</p> </li> </ul>"},{"location":"tests/status/#viewmodels","title":"ViewModels","text":"<ul> <li> <p>LoginViewModel</p> </li> <li> <p>RegisterViewModel</p> </li> <li> <p>DetailViewModel</p> </li> </ul>"},{"location":"tests/status/#instrumentation-tests","title":"Instrumentation Tests","text":"<p>Currently, instrumentation Tests are only written for:</p>"},{"location":"tests/status/#room-database","title":"Room Database","text":"<ul> <li>ArticleDao</li> </ul>"},{"location":"tests/status/#ui-tests","title":"UI Tests","text":"<ul> <li>LoginContent</li> </ul>"}]}